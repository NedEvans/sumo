@page "/ranks/view"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using Sumo.Data
@using Sumo.Models
@inject SumoDbContext Db
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Ranks</h3>

<div class="mb-3">
    <a href="ranks/add" class="btn btn-primary">
        <i class="bi bi-plus-circle"></i> Add New Rank
    </a>
</div>

@if (loading)
{
    <p><em>Data is loading...</em></p>
}
else if (ranks == null || !ranks.Any())
{
    <p>No ranks found.</p>
}
else
{
    <div class="grid">
        <QuickGrid Items="ranks" Class="table">
            <PropertyColumn Property="r => r.Name" Title="Name" Sortable="true" />
            <PropertyColumn Property="r => r.HierarchyLevel" Title="Hierarchy" Sortable="true" />
            <PropertyColumn Property="r => r.Description" Title="Description" />
            <TemplateColumn Context="r">
                <a href="ranks/add/@r.Id" class="btn btn-outline-primary btn-sm me-1">Edit</a> |
                <button type="button" class="btn btn-outline-danger btn-sm me-1"
                        @onclick="() => DeleteRank(r.Id)" disabled="@saving">
                    Delete
                </button>
            </TemplateColumn>
        </QuickGrid>
    </div>
}

@code {
    private IQueryable<Rank> ranks = Enumerable.Empty<Rank>().AsQueryable();
    private bool loading = true;
    private bool saving = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadRanks();
    }

    private async Task LoadRanks()
    {
        loading = true;
        try
        {
            var list = await Db.Ranks
                .OrderBy(r => r.HierarchyLevel)
                .ToListAsync();

            ranks = list.AsQueryable();
        }
        finally
        {
            loading = false;
        }
    }

    private async Task DeleteRank(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this rank?");
        if (!confirm) return;

        saving = true;
        errorMessage = string.Empty;

        try
        {
            var existingRank = await Db.Ranks.FindAsync(id);
            if (existingRank != null)
            {
                Db.Ranks.Remove(existingRank);
                await Db.SaveChangesAsync();
            }

            await LoadRanks();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting rank: {ex.Message}";
        }
        finally
        {
            saving = false;
        }
    }
}
