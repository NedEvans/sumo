@page "/fighterranks/view"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using Sumo.Data
@using Sumo.Models
@inject SumoDbContext Db
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Fighter Ranks</h3>

<div class="mb-3">
    <a href="fighterranks/add" class="btn btn-primary">
        <i class="bi bi-plus-circle"></i> Add New Fighter Rank
    </a>
</div>

@if (loading)
{
    <p><em>Loading fighter ranks...</em></p>
}
else
{
    <QuickGrid Items="filteredFighterRanks" Class="table">
        <!-- Fighter (with filter) -->
        <PropertyColumn Property="fr => fr.Fighter.Name" Title="Fighter" Sortable="true">
            <ColumnOptions>
                <div class="p-2">
                    <label class="form-label">Filter Fighter</label>
                    <input type="search"
                           class="form-control form-control-sm"
                           placeholder="Type to filter…"
                           value="@filterFighter"
                           @oninput="OnFilterFighter" />
                </div>
            </ColumnOptions>
        </PropertyColumn>

        <!-- Event location (with filter) -->
        <PropertyColumn Property="fr => fr.Event.Location" Title="Event" Sortable="true">
            <ColumnOptions>
                <div class="p-2">
                    <label class="form-label">Filter Event</label>
                    <input type="search"
                           class="form-control form-control-sm"
                           placeholder="Type to filter…"
                           value="@filterEvent"
                           @oninput="OnFilterEvent" />
                </div>
            </ColumnOptions>
        </PropertyColumn>

        <!-- Event date -->
        <PropertyColumn Property="fr => fr.Event.Date" Title="Date" Format="MMM-yy" Sortable="true" />

        <!-- Rank (with filter) -->
        <PropertyColumn Property="fr => fr.Rank.Name" Title="Rank" Sortable="true">
            <ColumnOptions>
                <div class="p-2">
                    <label class="form-label">Filter Rank</label>
                    <input type="search"
                           class="form-control form-control-sm"
                           placeholder="Type to filter…"
                           value="@filterRank"
                           @oninput="OnFilterRank" />
                </div>
            </ColumnOptions>
        </PropertyColumn>

        <!-- Weight -->
        <PropertyColumn Property="fr => fr.Weight" Title="Weight" Sortable="true" />

        <!-- Actions -->
        <TemplateColumn Context="fr">
            <a href="fighterranks/add/@fr.Id" class="btn btn-outline-primary btn-sm me-1">Edit</a> |
            <button type="button" class="btn btn-outline-danger btn-sm ms-1"
                    @onclick="() => DeleteFighterRank(fr.Id)" disabled="@saving">
                Delete
            </button>
        </TemplateColumn>
    </QuickGrid>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private IQueryable<FighterRank> fighterRanks = Enumerable.Empty<FighterRank>().AsQueryable();
    private IQueryable<FighterRank> filteredFighterRanks = Enumerable.Empty<FighterRank>().AsQueryable();

    private string filterFighter = string.Empty;
    private string filterEvent = string.Empty;
    private string filterRank = string.Empty;

    private bool loading = true;
    private bool saving = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadFighterRanks();
    }

    private async Task LoadFighterRanks()
    {
        loading = true;
        try
        {
            var list = await Db.FighterRanks
                .Include(fr => fr.Fighter)
                .Include(fr => fr.Event)
                .Include(fr => fr.Rank)
                .OrderByDescending(fr => fr.Id)
                .ToListAsync();

            fighterRanks = list.AsQueryable();
            ApplyFilters();
        }
        finally
        {
            loading = false;
        }
    }

    private void ApplyFilters()
    {
        var filtered = fighterRanks
            .AsEnumerable()
            .Where(fr =>
                (string.IsNullOrWhiteSpace(filterFighter) || fr.Fighter.Name.Contains(filterFighter, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(filterEvent)   || fr.Event.Location.Contains(filterEvent,   StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(filterRank)    || fr.Rank.Name.Contains(filterRank,        StringComparison.OrdinalIgnoreCase))
            )
            .ToList();

        filteredFighterRanks = filtered.AsQueryable();
        StateHasChanged();
    }

    private async Task DeleteFighterRank(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this fighter rank?");
        if (!confirm) return;

        saving = true;
        errorMessage = string.Empty;

        try
        {
            var fr = await Db.FighterRanks.FindAsync(id);
            if (fr != null)
            {
                Db.FighterRanks.Remove(fr);
                await Db.SaveChangesAsync();
                await LoadFighterRanks();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting fighter rank: {ex.Message}";
        }
        finally
        {
            saving = false;
        }
    }

    // Filter handlers (mirror fights page pattern)
    private void OnFilterFighter(ChangeEventArgs e) { filterFighter = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void OnFilterEvent(ChangeEventArgs e)   { filterEvent   = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
    private void OnFilterRank(ChangeEventArgs e)    { filterRank    = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }
}
