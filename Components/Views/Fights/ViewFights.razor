@page "/fights/view"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using Sumo.Data
@using Sumo.Models
@inject SumoDbContext Db
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Fights</h3>

<div class="mb-3">
    <a href="fights/add" class="btn btn-primary">
        <i class="bi bi-plus-circle"></i> Add New Fight
    </a>
</div>

@if (loading)
{
    <p><em>Loading fights...</em></p>
}
else
{
    <QuickGrid Items="filteredFights" Class="table">
        <PropertyColumn Property="f => f.Event.Location" Title="Event" />
        <PropertyColumn Property="f => f.DayInEvent" Title="Day" />

        <TemplateColumn Title="East">
            <HeaderTemplate>
                <input type="search"
                       value="@filterEast"
                       @oninput="e => { filterEast = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }"
                       class="form-control form-control-sm"
                       placeholder="Filter East" />
            </HeaderTemplate>
            <ChildContent Context="f">@f.FighterEast.Name</ChildContent>
        </TemplateColumn>

        <TemplateColumn Title="West">
            <HeaderTemplate>
                <input type="search"
                       value="@filterWest"
                       @oninput="e => { filterWest = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }"
                       class="form-control form-control-sm"
                       placeholder="Filter West" />
            </HeaderTemplate>
            <ChildContent Context="f">@f.FighterWest.Name</ChildContent>
        </TemplateColumn>

        <TemplateColumn Title="Winner">
            <HeaderTemplate>
                <input type="search"
                       value="@filterWinner"
                       @oninput="e => { filterWinner = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }"
                       class="form-control form-control-sm"
                       placeholder="Filter Winner" />
            </HeaderTemplate>
            <ChildContent Context="f">@f.Winner.Name</ChildContent>
        </TemplateColumn>

        <TemplateColumn Title="Method">
            <HeaderTemplate>
                <input type="search"
                       value="@filterMethod"
                       @oninput="e => { filterMethod = e.Value?.ToString() ?? string.Empty; ApplyFilters(); }"
                       class="form-control form-control-sm"
                       placeholder="Filter Method" />
            </HeaderTemplate>
            <ChildContent Context="f">@f.Method.NameJapanese</ChildContent>
        </TemplateColumn>

        <TemplateColumn Context="f">
            <a href="fights/add/@f.Id" class="btn btn-outline-primary btn-sm me-1">Edit</a> |
            <button type="button" class="btn btn-outline-danger btn-sm me-1"
                    @onclick="() => DeleteFight(f.Id)" disabled="@saving">
                Delete
            </button>
        </TemplateColumn>
    </QuickGrid>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private IQueryable<Fight> fights = Enumerable.Empty<Fight>().AsQueryable();
    private IQueryable<Fight> filteredFights = Enumerable.Empty<Fight>().AsQueryable();

    private string filterEast = string.Empty;
    private string filterWest = string.Empty;
    private string filterWinner = string.Empty;
    private string filterMethod = string.Empty;

    private bool loading = true;
    private bool saving = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadFights();
    }

    private async Task LoadFights()
    {
        loading = true;
        try
        {
            var list = await Db.Fights
                .Include(f => f.Event)
                .Include(f => f.FighterEast)
                .Include(f => f.FighterWest)
                .Include(f => f.Winner)
                .Include(f => f.Method)
                .OrderByDescending(f => f.Id)
                .ToListAsync();

            fights = list.AsQueryable();
            ApplyFilters();
        }
        finally
        {
            loading = false;
        }
    }

    private void ApplyFilters()
    {
        var filtered = fights
            .AsEnumerable()
            .Where(f =>
                (string.IsNullOrEmpty(filterEast) || f.FighterEast.Name.Contains(filterEast, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(filterWest) || f.FighterWest.Name.Contains(filterWest, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(filterWinner) || f.Winner.Name.Contains(filterWinner, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(filterMethod) || f.Method.NameJapanese.Contains(filterMethod, StringComparison.OrdinalIgnoreCase))
            )
            .ToList();

        filteredFights = filtered.AsQueryable();
    }

    private async Task DeleteFight(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this fight?");
        if (!confirm) return;

        saving = true;
        errorMessage = string.Empty;

        try
        {
            var fight = await Db.Fights.FindAsync(id);
            if (fight != null)
            {
                Db.Fights.Remove(fight);
                await Db.SaveChangesAsync();
                await LoadFights();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting fight: {ex.Message}";
        }
        finally
        {
            saving = false;
        }
    }
}
