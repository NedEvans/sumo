@page "/fighters/view"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using Sumo.Data
@using Sumo.Models
@inject SumoDbContext Db
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Fighters</h3>

<div class="mb-3 d-flex align-items-center">
    <a href="fighters/add" class="btn btn-primary me-3">
        <i class="bi bi-plus-circle"></i> Add New Fighter
    </a>

    <div class="form-check form-switch">
        <input class="form-check-input"
               type="checkbox"
               id="activeToggle"
               checked="@showActiveOnly"
               @onchange="OnToggleActive"/>
        <label class="form-check-label ms-2" for="activeToggle">
            @(showActiveOnly ? "Active Fighters" : "All Fighters")
        </label>
    </div>
</div>

@if (loading)
{
    <p><em>Data is loading...</em></p>
}
else
{
    <QuickGrid Items="filteredFighters" Class="table">
        <PropertyColumn Property="f => f.Name" Title="Name" Sortable="true">
            <ColumnOptions>
                <div class="p-2">
                    <label class="form-label">Filter Name</label>
                    <input type="search"
                           class="form-control form-control-sm"
                           placeholder="Type to filter…"
                           value="@filterName"
                           @oninput="OnFilterName" />
                </div>
            </ColumnOptions>
        </PropertyColumn>

        <PropertyColumn Property="f => f.Birthdate" Title="Birthdate" Format="dd-MM-yyyy" Sortable="true" />

        <PropertyColumn Property="f => f.Stable" Title="Stable" Sortable="true">
            <ColumnOptions>
                <div class="p-2">
                    <label class="form-label">Filter Stable</label>
                    <input type="search"
                           class="form-control form-control-sm"
                           placeholder="Type to filter…"
                           value="@filterStable"
                           @oninput="OnFilterStable" />
                </div>
            </ColumnOptions>
        </PropertyColumn>

        <TemplateColumn Context="f">
            <a href="fighters/add/@f.Id" class="btn btn-outline-primary btn-sm me-1">Edit</a> |
            <button type="button"
                    class="btn btn-outline-danger btn-sm ms-1"
                    @onclick="() => DeleteFighter(f.Id)"
                    disabled="@saving">
                Delete
            </button>
        </TemplateColumn>
    </QuickGrid>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private IQueryable<Fighter> fighters = Enumerable.Empty<Fighter>().AsQueryable();
    private IQueryable<Fighter> filteredFighters = Enumerable.Empty<Fighter>().AsQueryable();

    private bool showActiveOnly = true;
    private string filterName = string.Empty;
    private string filterStable = string.Empty;

    private bool loading = true;
    private bool saving = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadFighters();
    }

    private async Task LoadFighters()
    {
        loading = true;
        try
        {
            var query = Db.Fighters.AsQueryable();
            if (showActiveOnly)
                query = query.Where(f => f.Active);

            var list = await query
                .OrderBy(f => f.Name)
                .ToListAsync();

            fighters = list.AsQueryable();
            ApplyFilters();
        }
        finally
        {
            loading = false;
        }
    }

    private void ApplyFilters()
    {
        var filtered = fighters
            .AsEnumerable()
            .Where(f =>
                (string.IsNullOrWhiteSpace(filterName)   || f.Name.Contains(filterName, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(filterStable) || f.Stable.Contains(filterStable, StringComparison.OrdinalIgnoreCase))
            )
            .ToList();

        filteredFighters = filtered.AsQueryable();
        StateHasChanged();
    }

    private async Task DeleteFighter(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this fighter?");
        if (!confirm) return;

        saving = true;
        errorMessage = string.Empty;

        try
        {
            var existingFighter = await Db.Fighters
                .Include(f => f.FightsAsFighterEast)
                .Include(f => f.FightsAsFighterWest)
                .Include(f => f.Wins)
                .FirstOrDefaultAsync(f => f.Id == id);

            if (existingFighter == null)
            {
                errorMessage = "Fighter not found.";
                return;
            }

            if (existingFighter.FightsAsFighterEast.Any() ||
                existingFighter.FightsAsFighterWest.Any() ||
                existingFighter.Wins.Any())
            {
                errorMessage = "This fighter is referenced in fights and cannot be deleted.";
                return;
            }

            Db.Fighters.Remove(existingFighter);
            await Db.SaveChangesAsync();

            await LoadFighters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting fighter: {ex.Message}";
        }
        finally
        {
            saving = false;
        }
    }

    // UI events (no @bind:event anywhere — use @oninput with handlers)
    private async Task OnToggleActive(ChangeEventArgs _)
    {
        showActiveOnly = !showActiveOnly;
        await LoadFighters();
    }

    private void OnFilterName(ChangeEventArgs e)
    {
        filterName = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
    }

    private void OnFilterStable(ChangeEventArgs e)
    {
        filterStable = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
    }
}
